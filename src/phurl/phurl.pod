=encoding utf8

=head1 NAME

phurl - Parallel Curl

=head1 SYNOPSIS

 phurl -u [URL] [options] +[HOST_LIST] -see HOST_LIST section

=head1 DESCRIPTION

parallel curling utility useful for pulling a single url from many different hosts. phurl supports reading line delimited hosts from stdin, a shell command string, or a file.

=head1 HOST_LIST

The host list to use can be:
=item piped into stdin
=item specified by a line delimited host file (option B<host_file>)
=item specified by a json file (option B<host_json>) containing a single array of host objects { "host": <>, "port", <> } 
=item line delimited hosts output from an exec'd command (option B<execute>)

=head1 OPTIONS

B<-h>, B<--help>          display this help and exit

B<-v>, B<--version>       display this version and exit

B<-u>, B<--url>            URL -REQUIRED (unless running cli: see --cli option).

B<-d>, B<--data>           HTTP body data -supports bodies up to -supports curl style @ <file> specifier.

B<-f>, B<--host_file>      host name file.

B<-J>, B<--host_json>      host listing json format.

B<-x>, B<--execute>        script to execute to get host names.  

B<-p>, B<--parallel>       number of parallel requests. Default: 100.

B<-t>, B<--threads>        number of parallel threads. Default: 1

B<-H>, B<--header>         request headers -can add multiple ie -H <> -H <>...

B<-X>, B<--verb>           request command -HTTP verb to use -GET/PUT/etc

B<-T>, B<--timeout>        timeout (seconds).

B<-n>, B<--no_async_dns>   use getaddrinfo to resolve.

B<-k>, B<--no_cache>       don't use addr info cache.

B<-A>, B<--ai_cache>       path to Address Info Cache (DNS lookup cache).

B<-C>, B<--connect_only>   only connect -do not send request.

B<-Q>, B<--complete_time>  cancel requests after N seconds.

B<-W>, B<--complete_ratio> cancel requests after % complete (0.0-->100.0).

B<-y>, B<--cipher>         cipher --see "openssl ciphers" for list.

B<-O>, B<--tls_options>    SSL Options string.

B<-K>, B<--tls_verify>     verify server certificate.

B<-N>, B<--tls_sni>        use SSL SNI.

B<-B>, B<--tls_self_ok>    allow self-signed certificates.

B<-M>, B<--tls_no_host>    skip host name checking.

B<-F>, B<--tls_ca_file>    SSL CA File.

B<-L>, B<--tls_ca_path>    SSL CA Path.

B<-I>, B<--cli>            start interactive command line -URL not required.

B<-v>, B<--verbose>        verbose logging

B<-c>, B<--no_color>       turn off colors

B<-q>, B<--quiet>          Suppress output

B<-s>, B<--show_progress>  show progress

B<-m>, B<--show_summary>   show summary output

B<-o>, B<--output>         file to write output to. Defaults to stdout

B<-l>, B<--line_delimited> output <HOST> <RESPONSE BODY> per line

B<-j>, B<--json>           output json { <HOST>: "body": <RESPONSE> ...

B<-P>, B<--pretty>         pretty output

=head1 EXAMPLE

printf "www.google.com\nwww.yahoo.com\nwww.reddit.com\n" | phurl -p2 -t3 -u"https://bloop.com/" --show_progress --color --timeout=5

=head1 NOTES

For big jobs consider enabling tcp_tw_reuse -eg:
echo 1 > /proc/sys/net/ipv4/tcp_tw_reuse

=head1 COPYRIGHT

Copyright (C) 2014 Verizon.  All Rights Reserved.
Apache License: Version 2.0, January 2004 <http://www.apache.org/licenses/LICENSE-2.0>

Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

=head1 SEE ALSO

Source code available at https://github.com/VerizonDigital/hlx
